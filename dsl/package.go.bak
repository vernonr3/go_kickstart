package dsl

import (
	//	"fmt"
	"goa.design/goa/v3/eval"
	"goa.design/model/expr"

	// Register code generators for the model plugin
	_ "goa.design/model/plugin"
)

func Package(args ...interface{}) *expr.Design {
	_, ok := eval.Current().(eval.TopExpr)
	if !ok {
		eval.IncompatibleDSL()
		return nil
	}
	nargs := len(args)
	if nargs == 0 {
		eval.ReportError("Design: missing child DSL")
		return nil
	}
	dsl, ok := args[nargs-1].(func())
	if !ok {
		eval.ReportError("Design: missing child DSL (last argument must be a func)")
		return nil
	}
	if nargs > 1 {
		name, ok := args[0].(string)
		if !ok {
			eval.InvalidArgError("string", args[0])
		}
		expr.Root.Name = name
	}
	if nargs > 2 {
		desc, ok := args[1].(string)
		if !ok {
			eval.InvalidArgError("string", args[1])
		}
		expr.Root.Description = desc
	}
	if nargs > 3 {
		eval.ReportError("Design: too many arguments")
		return nil
	}
	if !eval.Execute(dsl, expr.Root) {
		return nil
	}
	return expr.Root
}
